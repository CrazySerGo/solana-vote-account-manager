#!/bin/bash


# Ensure solxact program is in $PATH
if ! type solxact >/dev/null 2>/dev/null; then
    echo
    echo "ERROR: solxact program cannot be found in PATH.  Please install solxact before using vamp:"
    echo
    echo "  https://github.com/bji/solxact"
    echo
    exit 1
fi


function usage ()
{
    case "$1" in

        "enter")

            cat <<EOF

Usage: vamp [-f <FEE_PAYER>] [-u <RPC_ENDPOINT>] enter <WITHDRAW_AUTHORITY>   \\
            <VOTE_ACCOUNT> <ADMINISTRATOR>                                    \\
            [<MAX_COMMISSION> <MAX_COMMISSION_INCREASE_PER_EPOCH>]

'vamp enter' initiates the use of the Vote Account Manager program with a
particular vote account.  This will bring the vote account under the control of
the Vote Account Manager program.  While under control of the program, actions
taken on the vote account must all be issued using the vamp command (except for
set-vote-authority, which can be accomplished by the vote authority as well as
by vamp).

The following optional arguments may preceed the 'enter' command:

-f <FEE_PAYER>: Will set the fee payer for the transaction to the keypair
    stored in the given file.  If this argument is not present, the
    WITHDRAW_AUTHORITY will be used as the fee payer.
-u <RPC_ENDPOINT>: Will set the URL of the RPC endpoint to send transactions to.
    A full URL may be specified, and in addition, the following special values
    may be used:
        l, localhost: http://localhost:8899
        d, devnet: https://api.devnet.solana.com
        t, testnet: https://api.testnet.solana.com
        m, mainnet: https://api.mainnet-beta.solana.com
    If RPC_ENDPOINT is not supplied, then mainnet is used.

The following required arguments must follow the 'enter' command:

<WITHDRAW_AUTHORITY>: Must be the path to the withdraw authority keypair of the
    vote account at the time that the 'vamp enter' command is executed.  The
    vote account will have its withdraw authority replaced by an authority
    controlled by the program; but the original WITHDRAW_AUTHORITY must be
    retained by the user as it will be used for high level authentication by
    the vamp program.
<VOTE_ACCOUNT>: Must be the pubkey of the vote account which will be put under
    control of the Vote Account Manager program.
<ADMINISTRATOR>: Must be the pubkey of the initial administrator of the Vote
    Account Manager managed account.  The ADMINISTRATOR will initially have
    authority for all actions except set-leave-epoch, leave, and
    set-administrator.

After the required arguments, the following optional arguments may be provided:

<MAX_COMMISSION>: If supplied, the Vote Account Manager will enforce a maximum
    commission on the vote account.  It will not allow any commission to be set
    that is larger than this MAX_COMMISSION value.  If this value is not
    supplied, then the Vote Account Manager program will not limit the
    commission which may be set on the vote account.  NOTE that if this value
    is set, then the vote account cannot leave control by the program until a
    leave epoch has been set, and that leave epoch has been reached.
<MAX_COMMISSION_INCREASE_PER_EPOCH>: Must be suppled if <MAX_COMMISSION> is
    supplied.  This gives the maximum increase, in absolute value terms, that
    is allowed for the vote account per epoch.

Examples:

# Put vote account 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz under control
# of the Vote Account Manager program.  The withdraw authority of the vote
# account is the keypair at withdraw_authority.json.  The initial administrator
# is the keypair at administrator.json.

$ vamp enter withdraw_authority.json                                          \\
             3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz                     \\
             administrator.json

# Put the same vote account under control of the Vote Account Manager program,
# but use a specific fee payer, and also set a maximum commission of 10% and
# a maximum commission change per epoch of 3%.

$ vamp -f fee_payer.json enter withdraw_authority.json                        \\
                               3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz   \\
                               administrator.json                             \\
                               10 3

EOF
            ;;
        
        "set-leave-epoch")

            cat <<EOF

Usage: vamp [-f <FEE_PAYER>] [-u <RPC_ENDPOINT>] set-leave-epoch              \\
            <WITHDRAW_AUTHORITY> <VOTE_ACCOUNT> <LEAVE_EPOCH>

'vamp set-leave-epoch` sets the earliest epoch at which a 'leave' command may
be issued to return control of the vote account to the withdraw authority.

The following optional arguments may preceed the 'set-leave-epoch' command:

-f <FEE_PAYER>: Will set the fee payer for the transaction to the keypair
    stored in the given file.  If this argument is not present, the
    WITHDRAW_AUTHORITY will be used as the fee payer.
-u <RPC_ENDPOINT>: Will set the URL of the RPC endpoint to send transactions to.
    A full URL may be specified, and in addition, the following special values
    may be used:
        l, localhost: http://localhost:8899
        d, devnet: https://api.devnet.solana.com
        t, testnet: https://api.testnet.solana.com
        m, mainnet: https://api.mainnet-beta.solana.com
    If RPC_ENDPOINT is not supplied, then mainnet is used.

The following required arguments must follow the 'set-leave-epoch' command:

<WITHDRAW_AUTHORITY>: Must be the keypair of the original withdraw authority of
    the vote account.  Only this keypair retains authority to set the leave
    epoch after the vote account has been placed under program control.
<VOTE_ACCOUNT>: Must be the pubkey of the vote account under program control.
<LEAVE_EPOCH>: Must be the number of the epoch which is set as the earliest
    epoch that the vote account may leave program control.  Note that this
    value must be at least the current epoch + 2.

set-leave-epoch is only necessary if the Vote Account Manager program has been
configured to restrict commission on the vote account.  If this is the case,
then the Vote Account Manage program requires that a "leave epoch" be set
before allowing the leave command to take control of the vote account away from
the program.  This prevents the withdraw authority from getting around the max
commission values by removing the vote account from program control and then
setting the commission directly.

The "leave epoch" must be at least 1 full epoch beyond the current epoch.  This
in effect puts a minimum amount of time before the withdraw authority must wait
to leave the program at 1 full epoch.  Thus any stakers of the vote account
will have at least 1 full epoch to decide whether to de-stake based on the
validator's intention to leave the program and thus revoke the controls that
have been placed on its commission.

For example, if the current epoch is 100, then the earliest leave epoch that
may be set is 102.  During epoch 101, stakers may decide how to respond to the
validator's intention to stop using the program.

Note that after the leave command is successfully issued, no commission changes
will be allowed for the validator.  The validator operator must remove the
validator from the program and then can change commission at will, or can put
the vote account back under the program's control with a new 'enter' command,
setting new commission limits if desired.

Example:

# Request to be able to remove vote account
# 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz from the program no earlier
# than epoch 120.  The original withdraw authority of the vote account is
# provided in the keypair file withdraw_authority.json.

$ vamp set-leave-epoch withdraw_authority.json                                 \\
                       3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz            \\
                       120

EOF
            ;;
            
        "leave")

            cat <<EOF

Usage: vamp [-f <FEE_PAYER>] [-u <RPC_ENDPOINT>] leave <WITHDRAW_AUTHORITY>    \\
            <VOTE_ACCOUNT>

'vamp leave` removes the vote account from Vote Account Manager program
control, and re-sets the vote account's withdraw authority to
<WITHDRAW_AUTHORITY>.  Note that if the program is enforcing commission limits
on the vote account, then a leave epoch must have been set by the 'vamp
set-leave-epoch' command, and the current epoch must be at or beyond that leave
epoch, for 'vamp leave' to succeed.

The following optional arguments may preceed the 'leave' command:

-f <FEE_PAYER>: Will set the fee payer for the transaction to the keypair
    stored in the given file.  If this argument is not present, the
    WITHDRAW_AUTHORITY will be used as the fee payer.
-u <RPC_ENDPOINT>: Will set the URL of the RPC endpoint to send transactions to.
    A full URL may be specified, and in addition, the following special values
    may be used:
        l, localhost: http://localhost:8899
        d, devnet: https://api.devnet.solana.com
        t, testnet: https://api.testnet.solana.com
        m, mainnet: https://api.mainnet-beta.solana.com
    If RPC_ENDPOINT is not supplied, then mainnet is used.

The following required arguments must follow the 'leave' command:

<WITHDRAW_AUTHORITY>: Must be the keypair of the original withdraw authority of
    the vote account.  Only this keypair retains authority to leave the program
    after the vote account has been placed under program control.
<VOTE_ACCOUNT>: Must be the pubkey of the vote account under program control.

Example:

# Remove the vote account 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz from
# program control.  The original vote account withdraw authority is provided
# in the keyfile withdraw_authority.json.

$ vamp leave withdraw_authority.json                                           \\
             3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz

EOF
            ;;
            
        "set-administrator")

            cat <<EOF

Usage: vamp [-f <FEE_PAYER>] [-u <RPC_ENDPOINT>] set-administrator             \\
            <WITHDRAW_AUTHORITY> <VOTE_ACCOUNT> <NEW_ADMINISTRATOR>

'vamp set-administrator` sets the pubkey of the new administrator account to
be used to authenticate these commands:
    set-operational-authority
    set-rewards-authority

The following optional arguments may preceed the 'set-administrator' command:

-f <FEE_PAYER>: Will set the fee payer for the transaction to the keypair
    stored in the given file.  If this argument is not present, the
    WITHDRAW_AUTHORITY will be used as the fee payer.
-u <RPC_ENDPOINT>: Will set the URL of the RPC endpoint to send transactions to.
    A full URL may be specified, and in addition, the following special values
    may be used:
        l, localhost: http://localhost:8899
        d, devnet: https://api.devnet.solana.com
        t, testnet: https://api.testnet.solana.com
        m, mainnet: https://api.mainnet-beta.solana.com
    If RPC_ENDPOINT is not supplied, then mainnet is used.

The following required arguments must follow the 'set-administrator' command:

<WITHDRAW_AUTHORITY>: Must be the keypair of the original withdraw authority of
    the vote account.  Only this keypair retains authority to change the
    administrator for the vote account.
<VOTE_ACCOUNT>: Must be the pubkey of the vote account under program control.
<NEW_ADMINISTRATOR>: Must be the pubkey of the new administrator.

Example:

# Set the administrator for vote account
# 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz to new_administrator.json.  The
# original vote account withdraw authority is provided in the keyfile
# withdraw_authority.json.

$ vamp set-administrator withdraw_authority.json                               \\
                         3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz          \\
                         new_administrator.json

EOF
            ;;
            
        "set-operational-authority")

            cat <<EOF

Usage: vamp [-f <FEE_PAYER>] [-u <RPC_ENDPOINT>] set-operational-authority     \\
            <ADMINISTRATOR> <VOTE_ACCOUNT> <NEW_AUTHORITY>

'vamp set-operational-authority` sets the pubkey of the new operational
authority account to be used to authenticate these commands:
    set-vote-authority
    set-validator-identity

The following optional arguments may preceed the 'set-operational-authority'
command:

-f <FEE_PAYER>: Will set the fee payer for the transaction to the keypair
    stored in the given file.  If this argument is not present, the
    ADMINISTRATOR will be used as the fee payer.
-u <RPC_ENDPOINT>: Will set the URL of the RPC endpoint to send transactions to.
    A full URL may be specified, and in addition, the following special values
    may be used:
        l, localhost: http://localhost:8899
        d, devnet: https://api.devnet.solana.com
        t, testnet: https://api.testnet.solana.com
        m, mainnet: https://api.mainnet-beta.solana.com
    If RPC_ENDPOINT is not supplied, then mainnet is used.

The following required arguments must follow the 'leave' command:

<ADMINISTRATOR>: Must be the keypair of the administrator of the vote account.
    Only this keypair retains authority to change the operational authority for
    a vote account.
<VOTE_ACCOUNT>: Must be the pubkey of the vote account under program control.
<NEW_AUTHORITY>: Must be the pubkey of the new operational authority.

Example:

# Set the operational authority for vote account
# 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz to
# new_operational_authority.json.  The administrator is provided in the keyfile
# administrator.json.

$ vamp set-operational-authority administrator.json                            \\
                                 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz  \\
                                 new_operational_authority.json

EOF
            ;;
            
        "set-rewards-authority")

            cat <<EOF

Usage: vamp [-f <FEE_PAYER>] [-u <RPC_ENDPOINT>] set-rewards-authority         \\
            <ADMINISTRATOR> <VOTE_ACCOUNT> <NEW_AUTHORITY>

'vamp set-rewards-authority` sets the pubkey of the new rewards authority
account to be used to authenticate these commands:
    withdraw
    set-commission

The following optional arguments may preceed the 'set-rewards-authority'
command:

-f <FEE_PAYER>: Will set the fee payer for the transaction to the keypair
    stored in the given file.  If this argument is not present, the
    ADMINISTRATOR will be used as the fee payer.
-u <RPC_ENDPOINT>: Will set the URL of the RPC endpoint to send transactions to.
    A full URL may be specified, and in addition, the following special values
    may be used:
        l, localhost: http://localhost:8899
        d, devnet: https://api.devnet.solana.com
        t, testnet: https://api.testnet.solana.com
        m, mainnet: https://api.mainnet-beta.solana.com
    If RPC_ENDPOINT is not supplied, then mainnet is used.

The following required arguments must follow the 'leave' command:

<ADMINISTRATOR>: Must be the keypair of the administrator of the vote account.
    Only this keypair retains authority to change the rewards authority for the
    vote account.
<VOTE_ACCOUNT>: Must be the pubkey of the vote account under program control.
<NEW_AUTHORITY>: Must be the pubkey of the new rewards authority.

Example:

# Set the rewards authority for vote account
# 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz to new_rewards_authority.json.
# The administrator is provided in the keyfile administrator.json.

$ vamp set-rewards-authority administrator.json                                \\
                             3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz      \\
                             new_rewards_authority.json

EOF
            ;;
            
        "set-vote-authority")
        
            cat <<EOF

Usage: vamp [-f <FEE_PAYER>] [-u <RPC_ENDPOINT>] set-vote-authority            \\
            <OPERATIONAL_AUTHORITY> <VOTE_ACCOUNT> <NEW_AUTHORITY>

'vamp set-vote-authority` sets the pubkey of the new vote authority account for
the vote account.  This can also be accomplished by the normal 'solana
vote-authorize-voter' command, since the vote authority of the vote account
(which the Vote Account Manager does not change) always has rights to switch to
a new vote authority.

The following optional arguments may preceed the 'set-vote-authority'
command:

-f <FEE_PAYER>: Will set the fee payer for the transaction to the keypair
    stored in the given file.  If this argument is not present, the
    OPERATIONAL_AUTHORITY will be used as the fee payer.
-u <RPC_ENDPOINT>: Will set the URL of the RPC endpoint to send transactions to.
    A full URL may be specified, and in addition, the following special values
    may be used:
        l, localhost: http://localhost:8899
        d, devnet: https://api.devnet.solana.com
        t, testnet: https://api.testnet.solana.com
        m, mainnet: https://api.mainnet-beta.solana.com
    If RPC_ENDPOINT is not supplied, then mainnet is used.

The following required arguments must follow the 'leave' command:

<OPERATIONAL_AUTHORITY>: Must be the keypair of the operational authority of
    the vote account.  Only this keypair retains authority to change the vote
    authority for the vote account via this program (although the vote
    account's vote authority may also change it using the 'solana
    vote-authorize-voter' command).  <VOTE_ACCOUNT>: Must be the pubkey of the
    vote account under program control.
<VOTE_ACCOUNT>: Must be the pubkey of the vote account under program control.
<NEW_AUTHORITY>: Must be the pubkey of the new vote authority.

Example:

# Set the vote authority for vote account
# 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz to new_vote_authority.json. 
# The operational authority is provided in the keyfile
# operational_authority.json.

$ vamp set-vote-authority operational_authority.json                           \\
                          3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz         \\
                          new_vote_authority.json

EOF
            ;;
            
        "set-validator-identity")
        
            cat <<EOF

Usage: vamp [-f <FEE_PAYER>] [-u <RPC_ENDPOINT>] set-validator-identity        \\
            <OPERATIONAL_AUTHORITY> <VOTE_ACCOUNT> <NEW_VALIDATOR_IDENTITY>

'vamp set-validator-identity` sets the keypair of the new validator identity
for the vote account.

The following optional arguments may preceed the 'set-validator-identity'
command:

-f <FEE_PAYER>: Will set the fee payer for the transaction to the keypair
    stored in the given file.  If this argument is not present, the
    OPERATIONAL_AUTHORITY will be used as the fee payer.
-u <RPC_ENDPOINT>: Will set the URL of the RPC endpoint to send transactions to.
    A full URL may be specified, and in addition, the following special values
    may be used:
        l, localhost: http://localhost:8899
        d, devnet: https://api.devnet.solana.com
        t, testnet: https://api.testnet.solana.com
        m, mainnet: https://api.mainnet-beta.solana.com
    If RPC_ENDPOINT is not supplied, then mainnet is used.

The following required arguments must follow the 'leave' command:

<OPERATIONAL_AUTHORITY>: Must be the keypair of the operational authority of
    the vote account.  Only this keypair retains authority to change the
    validator identity for the vote account via this program (although the vote
    account's vote authority may also change it using the 'solana
    vote-authorize-voter' command).
<VOTE_ACCOUNT>: Must be the pubkey of the vote account under program control.
<NEW_VALIDATOR_IDENTITY>: Must be the keypair file for the new validator
    identity.

Example:

# Set the validator identity for vote account
# 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz to new_validator_identity.json. 
# The operational authority is provided in the keyfile
# operational_authority.json.

$ vamp set-validator-identity operational_authority.json                       \\
                              3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz     \\
                              new_validator_identity.json

EOF
            ;;
            
        "withdraw")
        
            cat <<EOF

Usage: vamp [-f <FEE_PAYER>] [-u <RPC_ENDPOINT>] withdraw <REWARDS_AUTHORITY>  \\
            <VOTE_ACCOUNT> <RECIPIENT_ACCOUNT> [<SOL_TO_WITHDRAW>]

'vamp withdraw` withdraws SOL from the vote account.  It will never withdraw
below the rent exempt reserve of the vote account.

The following optional arguments may preceed the 'withdraw' command:

-f <FEE_PAYER>: Will set the fee payer for the transaction to the keypair
    stored in the given file.  If this argument is not present, the
    REWARDS_AUTHORITY will be used as the fee payer.
-u <RPC_ENDPOINT>: Will set the URL of the RPC endpoint to send transactions to.
    A full URL may be specified, and in addition, the following special values
    may be used:
        l, localhost: http://localhost:8899
        d, devnet: https://api.devnet.solana.com
        t, testnet: https://api.testnet.solana.com
        m, mainnet: https://api.mainnet-beta.solana.com
    If RPC_ENDPOINT is not supplied, then mainnet is used.

The following required arguments must follow the 'withdraw' command:

<REWARDS_AUTHORITY>: Must be the keypair of the rewards authority of
    the vote account.  Only this keypair retains authority to withdraw SOL
    from the vote account via this program.
<VOTE_ACCOUNT>: Must be the pubkey of the vote account under program control.
<RECIPIENT_ACCOUNT>: Must be the pubkey of the account into which the SOL
    will be withdrawn.

After the require arguments, a single optional argument may be supplied:

<SOL_TO_WITHDRAW>: Is the quantity of SOL to withdraw from the vote account.
    If this value is not present, or is specified as '0', then the maximum
    amount of SOL that can be withdrawn from the vote account while respecting
    rent exempt minimums will be withdrawn.

Examples:

# Withdraw 10.05 SOL from vote account 
# 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz into user_key.json.  The
# rewards authority is provided in the keyfile rewards_authority.json.

$ vamp withdraw rewards_authority.json                                         \\
                3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz                   \\
                user_key.json                                                  \\
                10.05

# Withdraw all available funds from the vote account:

$ vamp withdraw rewards_authority.json                                         \\
                3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz                   \\
                user_key.json

EOF
            ;;
            
        "set-commission")

            cat <<EOF

Usage: vamp [-f <FEE_PAYER>] [-u <RPC_ENDPOINT>] set-commission                \\
            <REWARDS_AUTHORITY> <VOTE_ACCOUNT> <NEW_COMMISSION>

'vamp set-commission` sets the vote account's commission to a new value.  If
the Vote Account Manager program has been configured to enforce commission
caps on the vote account, then NEW_COMMISSION must not violate those caps.

The following optional arguments may preceed the 'withdraw' command:

-f <FEE_PAYER>: Will set the fee payer for the transaction to the keypair
    stored in the given file.  If this argument is not present, the
    REWARDS_AUTHORITY will be used as the fee payer.
-u <RPC_ENDPOINT>: Will set the URL of the RPC endpoint to send transactions to.
    A full URL may be specified, and in addition, the following special values
    may be used:
        l, localhost: http://localhost:8899
        d, devnet: https://api.devnet.solana.com
        t, testnet: https://api.testnet.solana.com
        m, mainnet: https://api.mainnet-beta.solana.com
    If RPC_ENDPOINT is not supplied, then mainnet is used.

The following required arguments must follow the 'withdraw' command:

<REWARDS_AUTHORITY>: Must be the keypair of the rewards authority of
    the vote account.  Only this keypair retains authority to withdraw SOL
    from the vote account via this program.
<VOTE_ACCOUNT>: Must be the pubkey of the vote account under program control.
<NEW_COMMISSION>: The new commission to set.  If commission caps are in effect
    for the vote account, then NEW_COMMISSION must be no greater than the
    max allowed commission, and must be no more than the maximum commission
    increase above the commission that the vote account was set to when the
    current epoch begin.  Also, if a leave epoch has been set, then the
    commission cannot be changed.

Example:

# Set vote account 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz to have
# commission 5%.  The rewards authority is provided in rewards_authority.json

$ vamp set-commission rewards_authority.json                                   \\
                      3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz             \\
                      5

EOF
            ;;

        "show")

            cat <<EOF

Usage: vamp [-u <RPC_ENDPOINT>] show <VOTE_ACCOUNT> [json]

'vamp show` shows the currently configured values for a vote account under
control of the Vote Account Manager program.

The following optional arguments may preceed the 'show' command:

-u <RPC_ENDPOINT>: Will set the URL of the RPC endpoint to send transactions to.
    A full URL may be specified, and in addition, the following special values
    may be used:
        l, localhost: http://localhost:8899
        d, devnet: https://api.devnet.solana.com
        t, testnet: https://api.testnet.solana.com
        m, mainnet: https://api.mainnet-beta.solana.com
    If RPC_ENDPOINT is not supplied, then mainnet is used.

The following required argument must follow the 'show' command:

<VOTE_ACCOUNT>: Must be the pubkey of the vote account under program control.

The following optional argument may follow the required argument:

json: If the word 'json' is provided after the <VOTE_ACCOUNT>, then the
    output format will be JSON, otherwise it will be human readable lines.

Example:

# Show the configuration values for the vote account
# 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz

$ vamp show 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz

Manager Account: ABsS4JPCWYyN1evPJpudm7apmEZp5NTocN3CAxKnSCQk
Withdraw Authority: 3cnbBcMULnSoyLtgGNwrEPdLiqwuzpU4bVpro2m71vn2
Administrator: 3wHoK6DTF9jPCqDQgp99RF88qo4QPyKca9gxxSMHYsMu
Operational Authority: B2YVSHfY3uK5egSzvt1unMchmdo3mxiC2grMxQpxf7DB
Rewards Authority: DchTjdEyR8ea46ofauxnVPMRZvBnCpkYkYixSXpQfNnk
Max Commission: 10
Max Commission Increase Per Epoch: 3

# Show again, this time, in JSON format:

$ vamp show 3yP1VFUXzgND1UoLiVeu5AST46Ze6FVnR4DH7DDrgYTz json

{"manager_account_pubkey":"ABsS4JPCWYyN1evPJpudm7apmEZp5NTocN3CAxKnSCQk","withdraw_authority":"3cnbBcMULnSoyLtgGNwrEPdLiqwuzpU4bVpro2m71vn2","administrator":"3wHoK6DTF9jPCqDQgp99RF88qo4QPyKca9gxxSMHYsMu","operational_authority":"B2YVSHfY3uK5egSzvt1unMchmdo3mxiC2grMxQpxf7DB","rewards_authority":"DchTjdEyR8ea46ofauxnVPMRZvBnCpkYkYixSXpQfNnk","max_commission":10,"max_commission_increase_per_epoch":3}

EOF
            ;;
            
        *)

            cat <<EOF

vamp is a utility script that can be used to interact with the Vote Account
Manager program.  All functionality of the program can be exercised using this
script.  Note that the 'solxact' program must be installed to use vamp.


Usage: vamp enter                      -- To start using VAMP
       vamp set-leave-epoch            -- To set a leave epoch
       vamp leave                      -- To stop using VAMP
       vamp set-administrator          -- To set the administrator
       vamp set-operational-authority  -- To set the operational authority
       vamp set-rewards-authority      -- To set the rewards authority
       vamp set-vote-authority         -- To set the vote authority
       vamp set-validator-identity     -- To set the validator identity
       vamp withdraw                   -- To withdraw from the vote account
       vamp set-commission             -- To set commission
       vamp show                       -- To show managed state
       vamp help                       -- To print this help message


For help on a specific command, use 'vamp help <COMMAND>', for example:

$ vamp help enter

EOF
            ;;

    esac
}


function require ()
{
    if [ -z "$2" ]; then
        usage "$1"
        exit 1
    fi
}


function tx ()
{
    echo $@ | solxact encode | solxact hash $RPC_ENDPOINT | solxact sign $AUTHORITY | solxact submit $RPC_ENDPOINT
}


function tx_2 ()
{
    ADDITIONAL_SIGNER=$1
    shift
    
    echo $@ | solxact encode | solxact hash $RPC_ENDPOINT | solxact sign $AUTHORITY | solxact sign $ADDITIONAL_SIGNER \
            | solxact submit $RPC_ENDPOINT
}

# Data is piped in
function to_base58 ()
{
    local -a base58_chars=(
        1 2 3 4 5 6 7 8 9
        A B C D E F G H   J K L M N   P Q R S T U V W X Y Z
        a b c d e f g h i j k   m n o p q r s t u v w x y z
    )
    xxd -p -u | tr -d '\n' |
        {
            read hex
            while [[ "$hex" =~ ^00 ]]; do
                echo -n 1; hex="${hex:2}"
            done
            if test -n "$hex"; then
                dc -e "16i0$hex Ai[58~rd0<x]dsxx+f" |
                    while read -r
                    do echo -n "${base58_chars[REPLY]}"
                    done
            fi
            echo
        }
}

# Given base64 data $2 (as loaded by get_account_data), returns the numeric u8 value at offset $1
function get_data_u8 ()
{
    local offset=$1
    
    echo "$2" | base64 -d | od -An -j$offset -N1 -tu1 -v | tr -d [:space:]
}


# Given base64 data $2 (as loaded by get_account_data), returns the numeric u16 value at offset $1
function get_data_u16 ()
{
    local offset=$1
    
    echo "$2" | base64 -d | od -An -j$offset -N2 -tu2 -v | tr -d [:space:]
}


# Given base64 data $2 (as loaded by get_account_data), returns the numeric u32 value at offset $1
function get_data_u32 ()
{
    local offset=$1
    
    echo "$2" | base64 -d | od -An -j$offset -N4 -tu4 -v | tr -d [:space:]
}


# Given base64 data $2 (as loaded by get_account_data), returns the numeric u64 value at offset $1
function get_data_u64 ()
{
    local offset=$1
    
    echo "$2" | base64 -d | od -An -j$offset -N8 -tu8 -v | tr -d [:space:]
}


# Given base64 data $2 (as loaded by get_account_data), returns the bool value at offset $1
function get_data_bool ()
{
    local bv=`get_data_u8 $1 "$2"`

    if [ "0$bv" -eq 0 ]; then
        echo false
    else
        echo true
    fi
}


# Given base64 data $2 (as loaded by get_account_data), returns the pubkey value at offset $1 (as Base58 string)
function get_data_pubkey ()
{
    local offset=$1
    echo "$2" | base64 -d | dd bs=1 count=32 skip=$offset status=none | to_base58
}


function get_account_data ()
{
    local RPC_URL=$1
    local ACCOUNT_PUBKEY=$2
    local DATA_OFFSET=$3
    local DATA_LEN=$4

    if [ -n "$DATA_OFFSET" ]; then
        DATA_SLICE="\"dataSlice\":{\"offset\":$DATA_OFFSET,\"length\":$DATA_LEN},"
    else
        DATA_SLICE=
    fi

    DATA=`curl -s $RPC_URL -X POST -H "Content-Type: application/json" -d "{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"getAccountInfo\",\"params\":[\"$ACCOUNT_PUBKEY\",{$DATA_SLICE\"encoding\":\"base64\"}]}" | jq -r ".result.value.data[0]"`

    if [ "$DATA" = "null" ]; then
        echo -n ""
    else
        echo -n "$DATA"
    fi
}


# If the next argument is [-f], then a fee payer is specified
if [ "$1" = "-f" ]; then
    FEE_PAYER="$1"
    shift
fi


# If the next argument is [-u], then an RPC endpoint is specified, otherwise use the default
if [ "$1" = "-u" ]; then
    shift
    if [ -z "$1" ]; then
        usage
        exit 1
    fi
    case "$1" in
        l | localhost) RPC_ENDPOINT=http://localhost:8899 ;;
        d | devnet) RPC_ENDPOINT=https://api.devnet.solana.com ;;
        t | testnet) RPC_ENDPOINT=https://api.testnet.solana.com ;;
        m | mainnet) RPC_ENDPOINT=https://api.mainnet-beta.solana.com ;;
        *) RPC_ENDPOINT="$1" ;;
    esac
    shift
else
    RPC_ENDPOINT=https://api.mainnet-beta.solana.com
fi


# The command is the next argument.
COMMAND="$1"
if [ -z "$COMMAND" -o "$COMMAND" = "help" ]; then
    usage "$2"
    exit 0
fi
shift


# For all commands except show, an authority is provided
if [ "$COMMAND" != "show" ]; then

    # The authority is the next argument.
    AUTHORITY="$1"
    if [ -z "$AUTHORITY" ]; then
        usage "$COMMAND"
        exit 1
    fi
    shift
    
    
    # If the fee payer was not specified, it is the authority
    if [ -z "$FEE_PAYER" ]; then
        FEE_PAYER="$AUTHORITY"
    fi
    
fi


# The vote account is the next argument
VOTE_ACCOUNT="$1"
if [ -z "$VOTE_ACCOUNT" ]; then
    usage "$COMMAND"
    exit 1
fi
shift


# Define pubkeys
if [ -z "$SELF_PROGRAM_PUBKEY" ]; then
    SELF_PROGRAM_PUBKEY="vamp1eWV3zyWNiRwC7rdiBznrN8nB8ML8uXGk2kg7cU"
fi

SYSTEM_PROGRAM_PUBKEY="11111111111111111111111111111111"
VOTE_PROGRAM_PUBKEY="Vote111111111111111111111111111111111111111"
CLOCK_SYSVAR_PUBKEY="SysvarC1ock11111111111111111111111111111111"
MANAGER_ACCOUNT_PUBKEY=`solxact pda $SELF_PROGRAM_PUBKEY [ pubkey $VOTE_ACCOUNT ] 2>/dev/null | cut -d '.' -f 1`

if [ -z "$MANAGER_ACCOUNT_PUBKEY" ]; then
    echo
    echo "ERROR: Failed to derive manager account address.  The supplied VOTE_ACCOUNT is not valid."
    usage "$COMMAND"
    exit 1
fi


# Handle commands
case "$COMMAND" in

    "enter")

        ADMINISTRATOR_ACCOUNT=$1
        MAX_COMMISSION=$2
        MAX_COMMISSION_INCREASE_PER_EPOCH=$3

        if [ -z "$MAX_COMMISSION" ]; then
            USE_COMMISSION_CAPS=false
            MAX_COMMISSION=0
            MAX_COMMISSION_INCREASE_PER_EPOCH=0
        else
            USE_COMMISSION_CAPS=true
            require enter $MAX_COMMISSION_INCREASE_PER_EPOCH
        fi

        tx "encoding c                                                                                                \
            fee_payer $FEE_PAYER                                                                                      \
            program $SELF_PROGRAM_PUBKEY                                                                              \
            // Vote Account Manager State Account //                                                                  \
            account $MANAGER_ACCOUNT_PUBKEY w                                                                         \
            // Vote Account //                                                                                        \
            account $VOTE_ACCOUNT w                                                                                   \
            // Funding Account //                                                                                     \
            account $FEE_PAYER ws                                                                                     \
            // Current Withdraw Authority //                                                                          \
            account $AUTHORITY s                                                                                      \
            // System Program Id //                                                                                   \
            account $SYSTEM_PROGRAM_PUBKEY                                                                            \
            // Vote Program Id //                                                                                     \
            account $VOTE_PROGRAM_PUBKEY                                                                              \
            // Clock Sysvar Id //                                                                                     \
            account $CLOCK_SYSVAR_PUBKEY                                                                              \
            // Instruction code 0 = Enter //                                                                          \
            u8 0                                                                                                      \
            // Administrator //                                                                                       \
            pubkey $ADMINISTRATOR_ACCOUNT                                                                             \
            // Use Commission Caps //                                                                                 \
            bool $USE_COMMISSION_CAPS                                                                                 \
            // Max Commission //                                                                                      \
            u8 $MAX_COMMISSION                                                                                        \
            // Max Commission Increase Per Epoch //                                                                   \
            u8 $MAX_COMMISSION_INCREASE_PER_EPOCH"
        
        ;;
    
    "set-leave-epoch")

        LEAVE_EPOCH=$1

        require set-leave-epoch $LEAVE_EPOCH

        tx "encoding c                                                                                                \
            fee_payer $FEE_PAYER                                                                                      \
            program $SELF_PROGRAM_PUBKEY                                                                              \
            // Vote Account Manager State Account //                                                                  \
            account $MANAGER_ACCOUNT_PUBKEY w                                                                         \
            // Vote Account //                                                                                        \
            account $VOTE_ACCOUNT                                                                                     \
            // Withdraw Authority //                                                                                  \
            account $AUTHORITY s                                                                                      \
            // Instruction code 1 = SetLeaveEpoch //                                                                  \
            u8 1                                                                                                      \
            // Leave Epoch //                                                                                         \
            u64 $LEAVE_EPOCH"

        ;;
    
    "leave")

        tx "encoding c                                                                                                \
            fee_payer $FEE_PAYER                                                                                      \
            program $SELF_PROGRAM_PUBKEY                                                                              \
            // Vote Account Manager State Account //                                                                  \
            account $MANAGER_ACCOUNT_PUBKEY w                                                                         \
            // Vote Account //                                                                                        \
            account $VOTE_ACCOUNT w                                                                                   \
            // Withdraw Authority //                                                                                  \
            account $AUTHORITY s                                                                                      \
            // Lamports Recipient -- assume fee payer //                                                              \
            account $FEE_PAYER w                                                                                      \
            // Vote Program Id //                                                                                     \
            account $VOTE_PROGRAM_PUBKEY                                                                              \
            // Clock Sysvar Id //                                                                                     \
            account $CLOCK_SYSVAR_PUBKEY                                                                              \
            // Instruction code 2 = Leave //                                                                          \
            u8 2"
        
        ;;

    "set-administrator")

        NEW_ADMINISTRATOR=$1

        require set-administrator $NEW_ADMINISTRATOR

        tx "encoding c                                                                                                \
            fee_payer $FEE_PAYER                                                                                      \
            program $SELF_PROGRAM_PUBKEY                                                                              \
            // Vote Account Manager State Account //                                                                  \
            account $MANAGER_ACCOUNT_PUBKEY w                                                                         \
            // Vote Account //                                                                                        \
            account $VOTE_ACCOUNT                                                                                     \
            // Withdraw Authority //                                                                                  \
            account $AUTHORITY s                                                                                      \
            // Instruction code 3 = SetAdministrator //                                                               \
            u8 3                                                                                                      \
            // New Administrator //                                                                                   \
            pubkey $NEW_ADMINISTRATOR"

        ;;
    
    "set-operational-authority")
    
        NEW_OPERATIONAL_AUTHORITY=$1

        require set-operational-authority $NEW_OPERATIONAL_AUTHORITY

        tx "encoding c                                                                                                \
            fee_payer $FEE_PAYER                                                                                      \
            program $SELF_PROGRAM_PUBKEY                                                                              \
            // Vote Account Manager State Account //                                                                  \
            account $MANAGER_ACCOUNT_PUBKEY w                                                                         \
            // Vote Account //                                                                                        \
            account $VOTE_ACCOUNT                                                                                     \
            // Administrator //                                                                                       \
            account $AUTHORITY s                                                                                      \
            // Instruction code 4 = SetOperationalAuthority //                                                        \
            u8 4                                                                                                      \
            // New Operational Authority //                                                                           \
            pubkey $NEW_OPERATIONAL_AUTHORITY"

        ;;
        
    "set-rewards-authority")
    
        NEW_REWARDS_AUTHORITY=$1

        require set-rewards-authority $NEW_REWARDS_AUTHORITY

        tx "encoding c                                                                                                \
            fee_payer $FEE_PAYER                                                                                      \
            program $SELF_PROGRAM_PUBKEY                                                                              \
            // Vote Account Manager State Account //                                                                  \
            account $MANAGER_ACCOUNT_PUBKEY w                                                                         \
            // Vote Account //                                                                                        \
            account $VOTE_ACCOUNT                                                                                     \
            // Administrator //                                                                                       \
            account $AUTHORITY s                                                                                      \
            // Instruction code 5 = SetRewardsAuthority //                                                            \
            u8 5                                                                                                      \
            // New Rewards Authority //                                                                               \
            pubkey $NEW_REWARDS_AUTHORITY"

        ;;
        
    "set-vote-authority")
    
        NEW_VOTE_AUTHORITY=$1

        require set-vote-authority $NEW_VOTE_AUTHORITY

        tx "encoding c                                                                                                \
            fee_payer $FEE_PAYER                                                                                      \
            program $SELF_PROGRAM_PUBKEY                                                                              \
            // Vote Account Manager State Account //                                                                  \
            account $MANAGER_ACCOUNT_PUBKEY                                                                           \
            // Vote Account //                                                                                        \
            account $VOTE_ACCOUNT w                                                                                   \
            // Operational Authority //                                                                               \
            account $AUTHORITY s                                                                                      \
            // Vote Program Id //                                                                                     \
            account $VOTE_PROGRAM_PUBKEY                                                                              \
            // Clock Sysvar Id //                                                                                     \
            account $CLOCK_SYSVAR_PUBKEY                                                                              \
            // Instruction code 6 = SetVoteAuthority //                                                               \
            u8 6                                                                                                      \
            // New Vote Authority //                                                                                  \
            pubkey $NEW_VOTE_AUTHORITY"

        ;;
        
    "set-validator-identity")
    
        NEW_VALIDATOR_IDENTITY=$1

        require set-validator-identity $NEW_VALIDATOR_IDENTITY

        # Transaction must be signed by new validator identity
        tx_2 $NEW_VALIDATOR_IDENTITY                                                                                  \
           "encoding c                                                                                                \
            fee_payer $FEE_PAYER                                                                                      \
            program $SELF_PROGRAM_PUBKEY                                                                              \
            // Vote Account Manager State Account //                                                                  \
            account $MANAGER_ACCOUNT_PUBKEY                                                                           \
            // Vote Account //                                                                                        \
            account $VOTE_ACCOUNT w                                                                                   \
            // Operational Authority //                                                                               \
            account $AUTHORITY s                                                                                      \
            // New Validator Identity //                                                                              \
            account $NEW_VALIDATOR_IDENTITY s                                                                         \
            // Vote Program Id //                                                                                     \
            account $VOTE_PROGRAM_PUBKEY                                                                              \
            // Instruction code 7 = SetValidatorIdentity //                                                           \
            u8 7"

        ;;
        
    "withdraw")

        # Ensure dc program is in $PATH
        if ! type dc >/dev/null 2>/dev/null; then
            echo
            echo "ERROR: dc program cannot be found in PATH.  Please install dc before using vamp."
            echo
            exit 1
        fi

        RECIPIENT_ACCOUNT=$1
        SOL=$2

        require withdraw $RECIPIENT_ACCOUNT

        # If SOL is not provided, use 0, which will instruct the program to withdraw all available lamports
        if [ -z "$SOL" ]; then
            SOL=0
        fi

        # Convert SOL to lamports
        LAMPORTS=`printf "%0.f" \`echo "$SOL 1000 * 1000 * 1000 * p" | dc -\``
        
        tx "encoding c                                                                                                \
            fee_payer $FEE_PAYER                                                                                      \
            program $SELF_PROGRAM_PUBKEY                                                                              \
            // Vote Account Manager State Account //                                                                  \
            account $MANAGER_ACCOUNT_PUBKEY                                                                           \
            // Vote Account //                                                                                        \
            account $VOTE_ACCOUNT w                                                                                   \
            // Rewards Authority //                                                                                   \
            account $AUTHORITY s                                                                                      \
            // Recipient //                                                                                           \
            account $RECIPIENT_ACCOUNT w                                                                              \
            // Vote Program Id //                                                                                     \
            account $VOTE_PROGRAM_PUBKEY                                                                              \
            // Instruction code 8 = Withdraw //                                                                       \
            u8 8                                                                                                      \
            // Lamports //                                                                                            \
            u64 $LAMPORTS"

        ;;
        
    "set-commission")
    
        NEW_COMMISSION=$1

        require set-commission $NEW_COMMISSION

        tx "encoding c                                                                                                \
            fee_payer $FEE_PAYER                                                                                      \
            program $SELF_PROGRAM_PUBKEY                                                                              \
            // Vote Account Manager State Account //                                                                  \
            account $MANAGER_ACCOUNT_PUBKEY w                                                                         \
            // Vote Account //                                                                                        \
            account $VOTE_ACCOUNT w                                                                                   \
            // Rewards Authority //                                                                                   \
            account $AUTHORITY s                                                                                      \
            // Vote Program Id //                                                                                     \
            account $VOTE_PROGRAM_PUBKEY                                                                              \
            // Instruction code 9 = SetCommission //                                                                  \
            u8 9                                                                                                      \
            // New Commission //                                                                                      \
            u8 $NEW_COMMISSION"

        ;;

    "show")

        # Ensure curl program is in $PATH
        if ! type curl >/dev/null 2>/dev/null; then
            echo
            echo "ERROR: curl program cannot be found in PATH.  Please install curl before using vamp."
            echo
            exit 1
        fi

        # Ensure base64 program is in $PATH
        if ! type base64 >/dev/null 2>/dev/null; then
            echo
            echo "ERROR: base64 program cannot be found in PATH.  Please install base64 before using vamp."
            echo
            exit 1
        fi
        
        # Ensure od program is in $PATH
        if ! type od >/dev/null 2>/dev/null; then
            echo
            echo "ERROR: od program cannot be found in PATH.  Please install od before using vamp."
            echo
            exit 1
        fi
        
        # Ensure tr program is in $PATH
        if ! type tr >/dev/null 2>/dev/null; then
            echo
            echo "ERROR: tr program cannot be found in PATH.  Please install tr before using vamp."
            echo
            exit 1
        fi
        
        # First argument may be "json" to show in json format
        if [ "$1" = "json" ]; then
            JSON=1
        else
            JSON=
        fi

        ACCOUNT_DATA=`get_account_data $RPC_ENDPOINT $MANAGER_ACCOUNT_PUBKEY`

        if [ -z "$ACCOUNT_DATA" ]; then
            echo "$VOTE_ACCOUNT is not managed by the Vote Account Manager program" >&2
            exit 1
        fi

        WITHDRAW_AUTHORITY=`get_data_pubkey 0 "$ACCOUNT_DATA"`
        
        ADMINISTRATOR=`get_data_pubkey 32 "$ACCOUNT_DATA"`
        
        OPERATIONAL_AUTHORITY=`get_data_pubkey 64 "$ACCOUNT_DATA"`
        
        REWARDS_AUTHORITY=`get_data_pubkey 96 "$ACCOUNT_DATA"`
        
        if [ `get_data_bool 128 "$ACCOUNT_DATA"` = "true" ]; then
            MAX_COMMISSION=`get_data_u8 129 "$ACCOUNT_DATA"`
            MAX_COMMISSION_INCREASE_PER_EPOCH=`get_data_u8 130 "$ACCOUNT_DATA"`
        else
            MAX_COMMISSION=
        fi

        LEAVE_EPOCH=`get_data_u64 144 "$ACCOUNT_DATA"`

        if [ -z "$JSON" ]; then
            echo
            echo "Manager Account: $MANAGER_ACCOUNT_PUBKEY"
            echo "Withdraw Authority: $WITHDRAW_AUTHORITY"
            echo "Administrator: $ADMINISTRATOR"
            echo "Operational Authority: $OPERATIONAL_AUTHORITY"
            echo "Rewards Authority: $REWARDS_AUTHORITY"
            if [ -n "$MAX_COMMISSION" ]; then
                echo "Max Commission: $MAX_COMMISSION"
                echo "Max Commission Increase per Epoch: $MAX_COMMISSION_INCREASE_PER_EPOCH"
            fi
            if [ 0$LEAVE_EPOCH -gt 0 ]; then
                echo "Leave Epoch: $LEAVE_EPOCH"
            fi
            echo
        else
            echo -n '{"manager_account_pubkey":"'$MANAGER_ACCOUNT_PUBKEY'",'
            echo -n '"withdraw_authority":"'$WITHDRAW_AUTHORITY'","administrator":"'$ADMINISTRATOR'",'
            echo -n '"operational_authority":"'$OPERATIONAL_AUTHORITY'","rewards_authority":"'$REWARDS_AUTHORITY'"'
            if [ -n "$MAX_COMMISSION" ]; then
                echo -n ',"max_commission":'$MAX_COMMISSION
                echo -n ',"max_commission_increase_per_epoch":'$MAX_COMMISSION_INCREASE_PER_EPOCH
            fi

            if [ 0$LEAVE_EPOCH -gt 0 ]; then
                echo -n ',"leave_epoch":'$LEAVE_EPOCH
            fi

            echo "}"
        fi
        
        ;;
        
    "*")

        usage
        exit 0
         
        ;;
         
esac
